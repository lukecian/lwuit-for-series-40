= Using Resource Editor for UI creation =

[[PageOutline(1-3,Table of Contents,inline)]]

This tutorial explains what modifications are needed to get the generated Netbeans project to run in the Nokia SDK 1.1.

== Creating a UI with !ResourceEditor ==
The current version of the !ResourceEditor creates a !Netbeans project that has a master project and a separate child project for each platform. To get the code to work, we have to slightly modify the generated project.

To start the resourceEditor, run the JAR package "Lwuit-ResourceEditor-1.0-SNAPSHOT.jar" from tools/ResourceEditor by executing the following line in the command prompt: 
java -jar Lwuit-ResourceEditor-1.0-SNAPSHOT.jar[[BR]]


=== Creating a demo UI ===
Select the "GUI Builder" tab in the !ResourceEditor and click the "+" sign to add new a Form. Select the "blank form" template and give the Form a name. From the palette, drag a label and a button to the empty area above the Palette. Next, select the Form component and  change the Layout to "!BoxLayout Y" from the Properties on the right.
[[BR]]
[[BR]]
[[Image(gui-builder-tab.png)]][[BR]]
Selecting the GUI builder tab[[BR]]

[[Image(add-ui-dialog.png)]][[BR]]
Adding Form[[BR]]

[[Image(demoform-layout.png)]][[BR]]
Two components in !demoform and the layout as !BoxLayout Y[[BR]]


== Using the UI resource file in your application project == 

There are two ways of adding the created user interface into the application project:[[BR]]
a) Letting the ResourceEditor wizard create a new !NetBeans project that contains the created UI [[BR]]
b) Adding the UI manually to an existing application project (works for Eclipse and !NetBeans)

=== A) Generating the !NetBeans project in the Resource Editor ===

'''Generating the project'''

The !ResourceEditor has a wizard that creates a new application project to which the user interface is added. This works only with the !NetBeans IDE. There are certain important things to remember when this approach is used.

From the Menu, select Application-->Generate Netbeans Project and select DemoForm as the main form. Give the project a name; in this case the name is "DemoProject". Select where you want to save the project files. After this, you might get several error messages about Netbeans not found etc. You don't have to worry about these. They are displayed because ResourceEditor tries to open the project automatically but cannot find the Netbeans executable.

'''Note! ''' During the first-time use it may easily happen that you have generated the project before having configured Netbeans.exe to !ResourceEditor. In this case, 4 INSTANCES of Netbeans will be launched. Close the projects in !NetBeans, close all the instances, and start a single instance of Netbeans. The desktop version of the demoproject might still be open. Close that one as well and follow the instructions in "Opening the project in Netbeans".

'''Opening the project in Netbeans'''

Start Netbeans and select File-->Open Project and select the "DemoProject" project. The DemoProject folder also contains the MIDP version of the project called "MIDP".  Open that one as well. In Netbeans you should now see this:[[BR]]

[[Image(generated-projects-resourceeditor2.png)]]

[[BR]]
[[BR]]
Check from the project properties that the following optional packages are selected: the Nokia User Interface 1.1 API, Gesture API, the Mobile Media API 1.0, and the Scalable 2D Vector Graphics API.

Open the project properties of the DemoProject.[[BR]]


[[Image(demoproject-optional-packages.png)]][[BR]]
[[BR]]

After these adjustments you should be able to build the MIDP project and run it in the emulator.

=== B) Adding GUI resource file manually into your project ===

Alternatively, you can load the GUI resource file yourself to your LWUIT project. This is the only way to use GUI resource files if you are an Eclipse user.

First, save your .res file in the Eclipse project's res folder. To load the res file you have to use the UIBuilder class. Add this piece of code to your application:
{{{
UIBuilder b = new UIBuilder();
b.setResourceFilePath("/gui.res");
Form f = b.showForm("TestForm", null);
}}}

In the showForm method give the name of the form you want show. To get a component from the Form, you can use the findByName method. In the example below we get a Label component and change its text:
{{{
Label lb = (Label)b.findByName("Label", f);
lb.setText("Changed text");
}}}

== Notes on the development process ==

When making iterative changes to your UI design and application logic, the new UI changes are taken into the project whenever you save your GUI resource file in Resource Editor.

''' Note! ''' Do not modify the autogenerated GUI resource file in the IDE. If you have changed anything in that file and make changes to it in Resource Editor, your changes will be overridden. Maintain any other manually made UI changes in a separate source file.

== Differences between running the example in the !ResourceEditor and on the phone ==
Here is a list of differences:
* Menus are placed on the other side in Series 40 phones. For example, the "Menu" button is on the left on the phone and "Exit" is on the right. This is because in Series 40 phones the Options menu is always on the left.
* All menu items are always one below another instead of being on multiple columns as in the !ResourceEditor.